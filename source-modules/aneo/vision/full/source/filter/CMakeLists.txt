include("${CMAKE_SOURCE_DIR}/../../cmake/hipe_external_config.cmake")
include("${CMAKE_SOURCE_DIR}/../../cmake/common_functions_and_macros.cmake")
include("${CMAKE_SOURCE_DIR}/../../cmake/boost_config.cmake")
include("${CMAKE_SOURCE_DIR}/../../cmake/python36_config.cmake")
include("${CMAKE_SOURCE_DIR}/../../cmake/hipecore_config.cmake")


if(USE_DLIB)
  include("${CMAKE_SOURCE_DIR}/../../cmake/dlib_config.cmake")
endif(USE_DLIB)


# References.h is an autogenerated file with all algorithm headers that is
# created at build time.
set(header_ref_path ${CMAKE_SOURCE_DIR}/full/header/filter/References.h)
file(TO_NATIVE_PATH "${header_ref_path}" os_ref_header_path)

# Reset the file for debugging purposes.
if ( NOT EXISTS "${header_ref_path}")
	message(STATUS "Creating ${os_ref_header_path}")
	file(WRITE ${header_ref_path} "// Reset by CMake.")
endif()



add_hipe_library(filter full SHARED)
target_sources(filter PUBLIC ${header_ref_path})
define_file_basename_for_sources(filter)

if (MSVC)
	foreach(var HIPE_EXTERNAL_DIR CMAKE_BINARY_DIR Hipecore_DIR CMAKE_INSTALL_PREFIX)
	  file(TO_NATIVE_PATH ${${var}} ${var}_WIN)
	endforeach()
	configure_file(${CMAKE_SOURCE_DIR}/../../cmake/filter.vcxproj.user.in ${CMAKE_BINARY_DIR}/full/source/filter/filter.vcxproj.user @ONLY) 
endif()


set_target_properties(filter  PROPERTIES CUDA_SEPARABLE_COMPILATION ON)
set_target_properties(filter  PROPERTIES POSITION_INDEPENDENT_CODE ON)

CUDA_SELECT_NVCC_ARCH_FLAGS(ARCH_FLAGS 5.0 5.2 5.3 7.0)
message(status "Cuda Architecture to select ${ARCH_FLAGS}")
#message(status "CMAKE_CUDA_FLAGS : ${CMAKE_CUDA_FLAGS} adding ${ARCH_FLAGS}")
string(REPLACE ";" " " CUDA_flags "${ARCH_FLAGS}")
string(APPEND CMAKE_CUDA_FLAGS " ${CUDA_flags}")
message(status "CMAKE_CUDA_FLAGS : ${CMAKE_CUDA_FLAGS}")
SET(CUDA_PROPAGATE_HOST_FLAGS OFF)
#CUDA_CONVERT_FLAGS(filter)
# string(APPEND CMAKE_NVCC_FLAGS " -O3 -prec-sqrt=false")
# string(APPEND CMAKE_CUDA_FLAGS " -Xptxas=-v --compiler-options -Wall") #debug
# string(APPEND CMAKE_CUDA_FLAGS -gencode arch=compute_52,code=compute_52)
# string(APPEND CMAKE_CUDA_FLAGS -gencode arch=compute_53,code=compute_53)
# string(APPEND CMAKE_CUDA_FLAGS -gencode arch=compute_61,code=compute_61)
# string(APPEND CMAKE_CUDA_FLAGS -gencode arch=compute_70,code=compute_70)


if(CMAKE_CUDA_COMPILER_VERSION LESS 9.0)
	string(APPEND CMAKE_CUDA_FLAGS " -gencode arch=compute_20,code=compute_20") #TUD T7500
endif(CMAKE_CUDA_COMPILER_VERSION LESS 9.0)

target_compile_definitions(filter PUBLIC "$<$<CONFIG:Debug>:_DEBUG>")
target_link_libraries(filter data pydata)
message(STATUS "Look for CUDA : ${CUDA_MAJOR}.${CUDA_MINOR}")
if (WITH_CUBLAS OR WITH_CUDA)
	find_package(CUDA "${CUDA_MAJOR}.${CUDA_MINOR}" REQUIRED)
	target_link_libraries(filter ${CUDA_LIBRARIES})
	target_include_directories(filter PRIVATE ${CUDA_INCLUDE_DIRS})
		
	set(USE_CUDA "-DUSE_CUDA")
	message(STATUS "CUBLAS IS INCLUDED ${CUDA_VERSION}")
endif()
include("${CMAKE_SOURCE_DIR}/../../cmake/opencv_config.cmake")

message(STATUS "List of libraries : ${hipecore_LIBRARIES}")

target_link_libraries(filter ${hipecore_LIBRARIES})

message(STATUS "List of include dir : ${hipecore_INCLUDE_DIRS}")
target_include_directories(filter PUBLIC ${hipecore_INCLUDE_DIRS})


foreach(__component ${OpenCV_LIB_COMPONENTS})
target_link_libraries(filter ${__component})
endforeach()
target_link_libraries(filter ${Boost_LIBRARIES})
target_link_libraries(filter ${CMAKE_THREAD_LIBS_INIT})
target_link_libraries(filter ${PYTHON36_LIBRARIES})



list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}../../cmake")
list(APPEND CMAKE_MODULE_PATH "${HIPE_EXTERNAL_DIR}/libraries/cmake")
set(USE_OPENBLAS "")
set(USE_GFLAGS "")
set(USE_GLOG "")
set(USE_HDF5 "")
set(USE_LMDB "")
set(USE_LEVELDB "")
set(USE_SNAPPY "")
set(USE_PROTOBUF "")
set(USE_CAFFE "")
set(USE_CUDA "")
set(USE_CUBLAS "")
set(USE_WEBRTC "")

if (WITH_OPENBLAS)
	include("${CMAKE_SOURCE_DIR}/../../cmake/FindOpenblas.cmake")
	target_link_libraries(filter ${OPENBLAS_LIBRARIES})
	target_include_directories(filter PRIVATE ${OPENBLAS_INCLUDE_DIR})
	set(USE_OPENBLAS "-DUSE_OPENBLAS")
	message(STATUS "OPENBLAS IS INCLUDED")
endif()

if (WITH_GFLAGS)
		message(STATUS "Get Gflags from ${GFLAGS_ROOT_DIR}")
		find_package(Gflags 
					REQUIRED
					PATHS "${GFLAGS_ROOT_DIR}/lib/cmake/gflags"
					NO_DEFAULT_PATH)

				  message(STATUS "Gflags include dir : ${GFLAGS_INCLUDE_DIR}")
		if (WIN32)
		set_target_properties(gflags_static PROPERTIES
			MAP_IMPORTED_CONFIG_MINSIZEREL Release
			MAP_IMPORTED_CONFIG_RELWITHDEBINFO Release
			)
		  target_link_libraries(filter gflags_static)
		else()
		  target_link_libraries(filter gflags_shared)
		endif()
		target_include_directories(filter PRIVATE ${GFLAGS_INCLUDE_DIRS})
		set(USE_GFLAGS "-DUSE_GFLAGS")
		message(STATUS "GFLAGS IS INCLUDED")
endif()

if (WITH_GLOG)
	message(STATUS "Get Glog from ${GLOG_ROOT_DIR}")
	list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/../../cmake")
	find_package(Glog 
				REQUIRED
				PATHS "${GLOG_ROOT_DIR}/lib/cmake/glog"
				NO_DEFAULT_PATH)
	
	message(STATUS "Gflags include dir : ${GLOG_LIBRARIES}")
	message(STATUS "Gflags include dir : ${GLOG_LIBRARY}")
	set_target_properties(glog::glog PROPERTIES
	  MAP_IMPORTED_CONFIG_MINSIZEREL Release
	  MAP_IMPORTED_CONFIG_RELWITHDEBINFO Release
	  )
	target_include_directories(filter PRIVATE ${GLOG_INCLUDE_DIR})
	target_link_libraries(filter glog::glog)
	set(USE_GLOG "-DUSE_GLOG")
	message(STATUS "GLOG IS INCLUDED")

endif()

if (WITH_HDF5)
	find_package(HDF5 
				REQUIRED
				PATHS "${HIPE_EXTERNAL_DIR}/cmake"
				NO_DEFAULT_PATH)
	set_target_properties(hdf5::hdf5-shared PROPERTIES
	  MAP_IMPORTED_CONFIG_MINSIZEREL Release
	  MAP_IMPORTED_CONFIG_RELWITHDEBINFO Release
	  )
	set_target_properties(hdf5::hdf5_hl-shared PROPERTIES
	  MAP_IMPORTED_CONFIG_MINSIZEREL Release
	  MAP_IMPORTED_CONFIG_RELWITHDEBINFO Release
	  )
	target_link_libraries(filter hdf5::hdf5-shared)
	target_link_libraries(filter hdf5::hdf5_hl-shared)
	set(USE_HDF5 "-DUSE_HDF5")
	message(STATUS "HDF5 IS INCLUDED")
endif()
		
if (WITH_LMDB)		
	find_package(LMDB 
			REQUIRED
			PATHS "${HIPE_EXTERNAL_DIR}/lib/cmake")
	set(USE_LMDB "-DUSE_LMDB")
	set_target_properties(lmdb PROPERTIES
		  MAP_IMPORTED_CONFIG_MINSIZEREL Release
		  MAP_IMPORTED_CONFIG_RELWITHDEBINFO Release)
	target_link_libraries(filter lmdb)
	message(STATUS "LMDB IS INCLUDED")
endif()

# if (WITH_LEVELDB)			
	# find_package(LevelDB 
			# REQUIRED
			# PATHS "${HIPE_EXTERNAL_DIR}/libraries/cmake"
			# )
	# target_link_libraries(filter leveldb)
	# set(USE_LEVELDB "-DUSE_LEVELDB")
	# message(STATUS "LEVELDB IS INCLUDED")
# endif()

# if (WITH_SNAPPY)
	# find_package(Snappy 
				# REQUIRED
				# PATHS "${HIPE_EXTERNAL_DIR}/libraries/cmake")
    # set(USE_SNAPPY "-DUSE_SNAPPY")
	# message(STATUS "SNAPPY IS INCLUDED")
# endif()			
			
if (WITH_PROTOBUF)
	message(STATUS "Get Protobuf from ${HIPE_EXTERNAL_DIR}/libraries/cmake")
	set(protobuf_VERBOSE 1)
	set(Protobuf_DEBUG 1)
	message(STATUS "Protobuf find_path : ${Protobuf_INCLUDE_DIR}")
	find_package(Protobuf 
				REQUIRED
				PATHS "${HIPE_EXTERNAL_DIR}/cmake"
				NO_DEFAULT_PATH)
	set_target_properties(protobuf::libprotobuf-lite PROPERTIES
		  MAP_IMPORTED_CONFIG_MINSIZEREL Release
		  MAP_IMPORTED_CONFIG_RELWITHDEBINFO Release)
    set_target_properties(protobuf::libprotobuf PROPERTIES
		  MAP_IMPORTED_CONFIG_MINSIZEREL Release
		  MAP_IMPORTED_CONFIG_RELWITHDEBINFO Release)
	set_target_properties(protobuf::libprotoc PROPERTIES
		  MAP_IMPORTED_CONFIG_MINSIZEREL Release
		  MAP_IMPORTED_CONFIG_RELWITHDEBINFO Release)			
	target_link_libraries(filter protobuf::libprotobuf-lite protobuf::libprotoc)
	target_include_directories(filter PRIVATE ${Protobuf_INCLUDE_DIRS})
	set(USE_PROTOBUF "-DUSE_PROTOBUF")
	message(STATUS "PROTOBUF IS INCLUDED")
endif()

if (WITH_CAFFE)
	# set(ZLIB_LIBRARY_DEBUG "${HIPE_EXTERNAL_DIR}/libraries/lib/snappyd.lib" CACHE PATH "ZLIB_LIBRARY_DEBUG" FORCE)
	# set(ZLIB_LIBRARY_RELEASE "${HIPE_EXTERNAL_DIR}/libraries/lib/snappy.lib"  CACHE PATH "ZLIB_LIBRARY_RELEASE" FORCE)
	# set(ZLIB_INCLUDE_DIR "${HIPE_EXTERNAL_DIR}/libraries/include"  CACHE PATH "ZLIB_INCLUDE_DIR" FORCE)

	if(CMAKE_SYSTEM_PROCESSOR MATCHES "^(powerpc|ppc)64le")
		LIST(APPEND Caffe_INCLUDE_DIRS "${Caffe_DIR}/include")
		LIST(APPEND Caffe_LIBRARIES "${Caffe_DIR}/lib/libcaffe.so.1.0.0")
	else()
		find_package(Caffe 
						   REQUIRED
						   PATHS "${Caffe_DIR}/share/Caffe"
						   NO_DEFAULT_PATH)
		set_target_properties(caffe PROPERTIES
			MAP_IMPORTED_CONFIG_MINSIZEREL Release
			MAP_IMPORTED_CONFIG_RELWITHDEBINFO Release)
		set_target_properties(caffeproto PROPERTIES
			MAP_IMPORTED_CONFIG_MINSIZEREL Release
			MAP_IMPORTED_CONFIG_RELWITHDEBINFO Release)
	   if (WIN32)
		target_link_libraries(filter caffeproto)
	   endif()
	endif()
	target_link_libraries(filter ${Caffe_LIBRARIES})
	target_include_directories(filter PRIVATE ${Caffe_INCLUDE_DIRS})
	target_include_directories(filter PRIVATE ${CUDA_TOOLKIT_ROOT_DIR}/include)
	set(USE_CAFFE "-DUSE_CAFFE")
	message(STATUS "CAFFE IS INCLUDED")

endif()



if (WITH_CUBLAS)
	CUDA_ADD_CUBLAS_TO_TARGET(filter)
	set(USE_CUBLAS "-DUSE_CUBLAS")
	message(STATUS "CUBLAS IS INCLUDED")
endif()

if(USE_DLIB)
  target_link_libraries(filter ${dlib_LIBRARIES})
  # TODO
  # Remove the previous line and use this without setting include_headers
  # when we finally start using proper dlib find_package support.
#   target_link_libraries(filter dlib:dlib) #${dlib_LIBRARIES})
	set(USE_DLIB "-DUSE_DLIB")
	message(STATUS "DLIB IS INCLUDED")
endif(USE_DLIB)

if (WITH_WEBRTC)
  set(USE_WEBRTC "-DUSE_WEBRTC")
  if (WIN32)
	set(WEBRTC_ROOT_DIR "${HIPE_EXTERNAL_DIR}/WebRTCServer" CACHE PATH "WEBRTC_ROOT_DIR" FORCE)
  else()
	find_package(BoringSSL 
				REQUIRED
				PATHS "${HIPE_EXTERNAL_DIR}/lib/cmake"
				NO_DEFAULT_PATH)
	
	set(WEBRTC_ROOT_DIR "${HIPE_EXTERNAL_DIR}" CACHE PATH "WEBRTC_ROOT_DIR" FORCE)
	target_link_libraries(filter -std=c++11 ssl crypto)
  endif()
	find_package(WebRTCServer 
				REQUIRED
				PATHS "${WEBRTC_ROOT_DIR}/lib/cmake"
				NO_DEFAULT_PATH)
	message(STATUS "Search WebRTCServer location ${WEBRTC_ROOT_DIR}/lib/cmake/WebRTCServer")
	target_link_libraries(filter  WebRTCServer)
endif()

# Configure Visual Studio to handle more options.
if(WIN32)
  string(APPEND CMAKE_CXX_FLAGS " /bigobj")
endif(WIN32)

target_compile_definitions(filter PRIVATE "-DUSE_BOOST_REGEX" "-DFILTER_BUILD" "-DOPENCV" ${USE_DLIB} 
							${USE_GFLAGS} ${USE_GLOG} ${USE_CUDA} ${USE_CUBLAS} ${USE_LEVELDB} ${USE_LMDB} 
							${USE_HDF5} ${USE_SNAPPY} ${USE_PROTOBUF} ${USE_CAFFE} ${USE_WEBRTC})

# Enable the addition of algorithms without forcing a rerun of CMake
if(WIN32)
  set(script_path "${CMAKE_SOURCE_DIR}/../../../scripts/headerList.bat")
  set(script_compy "${CMAKE_SOURCE_DIR}/../../../scripts/compy.bat")
  file(TO_NATIVE_PATH "${script_compy}" os_path)
  set(script_compy ${os_path})
  add_custom_command(
    TARGET filter
    PRE_BUILD
    COMMAND cmd /c echo \#pragma once > "${os_ref_header_path}.cmp"
    COMMAND cmd /c echo ^// Algorithm header to reference  >> \"${os_ref_header_path}.cmp\"
    COMMAND cmd /c "${script_path}" "filter/algos" >> \"${os_ref_header_path}.cmp\"
	COMMAND cmd /c "${script_path}" "filter/datasource" >> \"${os_ref_header_path}.cmp\"
    COMMAND cmd /c "${script_compy}" \"${os_ref_header_path}.cmp\" \"${os_ref_header_path}\"
    COMMENT "Generate reference file"
		WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/full/header/
  )
endif(WIN32)

if(UNIX)
  set(script_path "${CMAKE_SOURCE_DIR}/../../../scripts/generate_References_header.sh")
  add_custom_target(
    update_reference
    COMMAND echo "Collect algorithm headers in ${os_ref_header_path}"
    WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}/full/header/filter"
  )

  add_custom_command(
    TARGET update_reference
    POST_BUILD
    COMMAND bash "${script_path}" "${os_ref_header_path}"
    COMMENT "Generate reference file"
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/full/header/filter
  )
add_dependencies(filter update_reference)
set(CMAKE_THREAD_PREFER_PTHREAD TRUE)
set(THREADS_PREFER_PTHREAD_FLAG TRUE)
find_package(Threads REQUIRED)
if(CMAKE_USE_PTHREADS_INIT)
  set(CMAKE_C_FLAGS ${CMAKE_C_FLAGS} "-pthread")
endif()
target_link_libraries( filter ${CMAKE_THREAD_LIBS_INIT} )
message(STATUS "LINK TO PTHREAD ${CMAKE_THREAD_LIBS_INIT}")
endif(UNIX)

# if(WIN32)
# target_compile_options(filter PRIVATE "/MP")
# endif()

target_compile_definitions(filter PRIVATE "-DUSE_BOOST_REGEX" "-DFILTER_BUILD")
#target_link_libraries(filter ${yolov2_LIBRARIES} )
if(WIN32) #TODO: Is MSYS true when MSVC is true?
  target_link_libraries(filter ws2_32 wsock32)
  set_target_properties(filter PROPERTIES LINK_FLAGS " -FORCE:MULTIPLE")
endif(WIN32)

display_target_properties(filter)


install (TARGETS filter 
		CONFIGURATIONS Debug
		RUNTIME DESTINATION bin/Debug
		COMPONENT runtime
		LIBRARY DESTINATION lib/Debug
		COMPONENT library
		ARCHIVE DESTINATION lib/Debug
		COMPONENT library)

install (TARGETS filter 
		CONFIGURATIONS Release 
		RUNTIME DESTINATION bin/Release 
		COMPONENT runtime
		LIBRARY DESTINATION lib/Release
		COMPONENT library
		ARCHIVE DESTINATION lib/Release		
		COMPONENT library)
		
install (TARGETS filter 
		CONFIGURATIONS RelWithDebInfo 
		RUNTIME DESTINATION bin/Release 
		COMPONENT runtime
		LIBRARY DESTINATION lib/Release
		COMPONENT library
		ARCHIVE DESTINATION lib/Release		
		COMPONENT library)
		
install_dependencies(filter)

install(CODE "set(PROJECT_SOURCE_DIR \"\${CMAKE_INSTALL_PREFIX}/full\")" COMPONENT runtime)
# install(CODE "set(CMAKE_DIRECTORY \"\${CMAKE_SOURCE_DIR}/../../cmake\")" COMPONENT runtime)
install(CODE "set(LICENSE_DIR \"${PROJECT_SOURCE_DIR}/../../..\")" COMPONENT runtime)
install(CODE "set(HIPE_INSTALL_DIR \"${CMAKE_INSTALL_PREFIX}\")" COMPONENT runtime)
install (SCRIPT "${CMAKE_SOURCE_DIR}/../../cmake/postInstall.cmake" COMPONENT runtime)

install(CODE "set(PROJECT_SOURCE_DIR \"\${CMAKE_INSTALL_PREFIX}/full/include\")" COMPONENT headers)
install(CODE "set(LICENSE_DIR \"${PROJECT_SOURCE_DIR}/../../..\")" COMPONENT headers)
install(CODE "set(HIPE_INSTALL_DIR \"${CMAKE_INSTALL_PREFIX}\")" COMPONENT headers)
install (SCRIPT "${CMAKE_SOURCE_DIR}/../../cmake/postInstall.cmake" COMPONENT headers)
