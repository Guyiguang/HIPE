include("${CMAKE_SOURCE_DIR}/cmake/common_functions_and_macros.cmake")
include("${CMAKE_SOURCE_DIR}/cmake/boost_config.cmake")
include("${CMAKE_SOURCE_DIR}/cmake/livemedia_config.cmake")
include("${CMAKE_SOURCE_DIR}/cmake/python27_config.cmake")
include("${CMAKE_SOURCE_DIR}/cmake/hipecore_config.cmake")
include("${CMAKE_SOURCE_DIR}/cmake/opencv_config.cmake")

if(USE_DLIB)
  include("${CMAKE_SOURCE_DIR}/cmake/dlib_config.cmake")
endif(USE_DLIB)


# References.h is an autogenerated file with all algorithm headers that is
# created at build time.
set(header_ref_path ${CMAKE_SOURCE_DIR}/header/filter/References.h)
file(TO_NATIVE_PATH "${header_ref_path}" os_ref_header_path)

# Reset the file for debugging purposes.
if ( NOT EXISTS "${header_ref_path}")
	message(STATUS "Creating ${os_ref_header_path}")
	file(WRITE ${header_ref_path} "// Reset by CMake.")
endif()
# # The References header includes all of the algorithm headers in the "algos"
# # directory. These should be added automatically. The following commands will
# # find the header files and update the References header if the content has
# # changed. It is currently unused because our development environment requires
# # the update to occur at build time to facilitate compilation for Visual Studio
# # developers. See the commands added below to deal with the updates at build
# # time.
#
# set(_src_filter_inc_path ${CMAKE_SOURCE_DIR}/header/filter)
# file(
#   GLOB_RECURSE algoFiles
#   LIST_DIRECTORIES false
#   RELATIVE "${_src_filter_inc_path}/algos"
#   "${_src_filter_inc_path}/algos/*.h*"
# )
# # Ensure a stable order for comparison. This is moot given that CMake's sort
# # order differs from both Bash's globbing and "sort -u"'s output. The comparison
# # file is regenerated regardless during the build process.
# list(SORT algoFiles)
# set(header_ref_content "// This file is automatically generated by CMake. Do not edit.\n#pragma once\n")
# foreach(algoFile IN ITEMS ${algoFiles})
#   message(STATUS "found algorithm header: ${algoFile}")
#   file(TO_CMAKE_PATH "${algoFile}" algoIncludePath)
#   set(header_ref_content "${header_ref_content}#include <filter/algos/${algoIncludePath}>\n")
# endforeach(algoFile IN ITEMS ${algoFiles})
#
# if(EXISTS "${header_ref_path}")
#   file(READ "${header_ref_path}" old_header_ref_content)
#   if(NOT ${header_ref_content}  STREQUAL ${old_header_ref_content})
#     message(STATUS "Updating ${header_ref_path}")
#     file(WRITE ${header_ref_path} "${header_ref_content}")
#   endif(NOT ${header_ref_content}  STREQUAL ${old_header_ref_content})
# else(EXISTS "${header_ref_path}")
#   message(STATUS "Creating ${header_ref_path}")
#   file(WRITE ${header_ref_path} "${header_ref_content}")
# endif(EXISTS "${header_ref_path}")


add_hipe_library(filter SHARED)
target_sources(filter PUBLIC ${header_ref_path})
define_file_basename_for_sources(filter)

if (MSVC)
	foreach(var HIPE_EXTERNAL_DIR CMAKE_BINARY_DIR Hipecore_DIR CMAKE_INSTALL_PREFIX)
	  file(TO_NATIVE_PATH ${${var}} ${var}_WIN)
	endforeach()
	configure_file(${CMAKE_SOURCE_DIR}/cmake/filter.vcxproj.user.in ${CMAKE_BINARY_DIR}/source/filter/filter.vcxproj.user @ONLY) 
endif()
# TODO
# See notes for Dlib linking below.
# if(USE_DLIB)
# endif(USE_DLIB)




# if(UNIX)
#   #set(MYLIBS -Wl,--whole-archive core streaming data -Wl,--no-whole-archive)
#   set(MYLIBS -Wl,--start-group core streaming data -Wl,--end-group)
# endif()
# target_link_libraries(filter -Wl,--start-group core streaming data -Wl,--end-group)


target_link_libraries(filter data pydata)

message(STATUS "List of libraries : ${hipecore_LIBRARIES}")

target_link_libraries(filter ${hipecore_LIBRARIES})

message(STATUS "List of include dir : ${hipecore_INCLUDE_DIRS}")
target_include_directories(filter PUBLIC ${hipecore_INCLUDE_DIRS})


target_link_libraries(filter ${OpenCV_LIBS} opencv_xfeatures2d)
target_link_libraries(filter ${Boost_LIBRARIES})
target_link_libraries(filter ${CMAKE_THREAD_LIBS_INIT})
target_link_libraries(filter ${Lives_LIBS})
target_link_libraries(filter ${PYTHON27_LIBRARIES})



list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")
list(APPEND CMAKE_MODULE_PATH "${HIPE_EXTERNAL_DIR}/libraries/cmake")
set(USE_OPENBLAS "")
set(USE_GFLAGS "")
set(USE_GLOG "")
set(USE_HDF5 "")
set(USE_LMDB "")
set(USE_LEVELDB "")
set(USE_SNAPPY "")
set(USE_PROTOBUF "")
set(USE_CAFFE "")
set(USE_CUDA "")
set(USE_CUBLAS "")
set(USE_WEBRTC "")

if (WITH_OPENBLAS)
	include("${CMAKE_SOURCE_DIR}/cmake/FindOpenblas.cmake")
	target_link_libraries(filter ${OPENBLAS_LIBRARIES})
	target_include_directories(filter PRIVATE ${OPENBLAS_INCLUDE_DIR})
	set(USE_OPENBLAS "-DUSE_OPENBLAS")
	message(STATUS "OPENBLAS IS INCLUDED")
endif()

if (WITH_GFLAGS)
	message(STATUS "Get Gflags from ${Caffe_DIR}/share/Caffe/")
	find_package(Gflags 
				REQUIRED
				PATHS "${HIPE_EXTERNAL_DIR}/gflags/lib/cmake"
				NO_DEFAULT_PATH)
	message(STATUS "Gflags include dir : ${GFLAGS_INCLUDE_DIR}")
	target_link_libraries(filter ${GFLAGS_LIBRARIES})
	target_include_directories(filter PRIVATE ${GFLAGS_INCLUDE_DIRS})
	set(USE_GFLAGS "-DUSE_GFLAGS")
	message(STATUS "GFLAGS IS INCLUDED")
endif()

if (WITH_GLOG)
	message(STATUS "Get Glog from ${GLOG_ROOT_DIR}")
	list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")
	find_package(Glog 
				REQUIRED
				PATHS "${GLOG_ROOT_DIR}/lib/cmake/glog"
				NO_DEFAULT_PATH)
	
	message(STATUS "Gflags include dir : ${GLOG_LIBRARIES}")
	message(STATUS "Gflags include dir : ${GLOG_LIBRARY}")

	target_include_directories(filter PRIVATE ${GLOG_INCLUDE_DIR})
	target_link_libraries(filter glog::glog)
	set(USE_GLOG "-DUSE_GLOG")
	message(STATUS "GLOG IS INCLUDED")

endif()

if (WITH_HDF5)
	find_package(HDF5 
				REQUIRED
				PATHS "${HIPE_EXTERNAL_DIR}/libraries/cmake"
				NO_DEFAULT_PATH)
	target_link_libraries(filter hdf5-shared)
	target_link_libraries(filter hdf5_hl-shared)
	set(USE_HDF5 "-DUSE_HDF5")
	message(STATUS "HDF5 IS INCLUDED")
endif()
		
if (WITH_LMDB)		
	find_package(LMDB 
			REQUIRED
			PATHS "${HIPE_EXTERNAL_DIR}/libraries/cmake")
	set(USE_LMDB "-DUSE_LMDB")
	target_link_libraries(filter lmdb)
	message(STATUS "LMDB IS INCLUDED")
endif()

if (WITH_LEVELDB)			
	find_package(LevelDB 
			REQUIRED
			PATHS "${HIPE_EXTERNAL_DIR}/libraries/cmake"
			)
	target_link_libraries(filter leveldb)
	set(USE_LEVELDB "-DUSE_LEVELDB")
	message(STATUS "LEVELDB IS INCLUDED")
endif()

if (WITH_SNAPPY)
	find_package(Snappy 
				REQUIRED
				PATHS "${HIPE_EXTERNAL_DIR}/libraries/cmake")
    set(USE_SNAPPY "-DUSE_SNAPPY")
	message(STATUS "SNAPPY IS INCLUDED")
endif()			
			
if (WITH_PROTOBUF)
	message(STATUS "Get Protobuf from ${HIPE_EXTERNAL_DIR}/libraries/cmake")
	set(protobuf_VERBOSE 1)
	set(Protobuf_DEBUG 1)
	message(STATUS "Protobuf find_path : ${Protobuf_INCLUDE_DIR}")
	find_package(Protobuf 
				REQUIRED
				PATHS "${HIPE_EXTERNAL_DIR}/libraries/cmake"
				NO_DEFAULT_PATH)

				
	target_link_libraries(filter protobuf::libprotobuf-lite protobuf::libprotoc)
	target_include_directories(filter PRIVATE ${Protobuf_INCLUDE_DIRS})
	set(USE_PROTOBUF "-DUSE_PROTOBUF")
	message(STATUS "PROTOBUF IS INCLUDED")
endif()

if (WITH_CAFFE)
	set(ZLIB_LIBRARY_DEBUG "${HIPE_EXTERNAL_DIR}/libraries/lib/snappyd.lib" CACHE PATH "ZLIB_LIBRARY_DEBUG" FORCE)
	set(ZLIB_LIBRARY_RELEASE "${HIPE_EXTERNAL_DIR}/libraries/lib/snappy.lib"  CACHE PATH "ZLIB_LIBRARY_RELEASE" FORCE)
	set(ZLIB_INCLUDE_DIR "${HIPE_EXTERNAL_DIR}/libraries/include"  CACHE PATH "ZLIB_INCLUDE_DIR" FORCE)
	find_package(Caffe 
			REQUIRED
			PATHS "${Caffe_DIR}/share/Caffe"
			NO_DEFAULT_PATH)
			
	target_link_libraries(filter caffeproto)
	target_link_libraries(filter caffe)
	target_include_directories(filter PRIVATE ${caffe_INCLUDE_DIRS})
	set(USE_CAFFE "-DUSE_CAFFE")
	message(STATUS "CAFFE IS INCLUDED")

endif()

if (WITH_CUBLAS OR WITH_CUDA)
	find_package(CUDA)
	target_link_libraries(filter ${CUDA_LIBRARIES})
	target_include_directories(filter PRIVATE ${CUDA_INCLUDE_DIRS})
		
	set(USE_CUDA "-DUSE_CUDA")
	message(STATUS "CUBLAS IS INCLUDED")
endif()

if (WITH_CUBLAS)
	CUDA_ADD_CUBLAS_TO_TARGET(filter)
	set(USE_CUBLAS "-DUSE_CUBLAS")
	message(STATUS "CUBLAS IS INCLUDED")
endif()

if(USE_DLIB)
  target_link_libraries(filter ${dlib_LIBRARIES})
  # TODO
  # Remove the previous line and use this without setting include_headers
  # when we finally start using proper dlib find_package support.
#   target_link_libraries(filter dlib:dlib) #${dlib_LIBRARIES})
	set(USE_DLIB "-DUSE_DLIB")
	message(STATUS "DLIB IS INCLUDED")
endif(USE_DLIB)

if (WITH_WEBRTC AND WIN32)
	set(USE_WEBRTC "-DUSE_WEBRTC")
	set(WEBRTC_ROOT_DIR "${HIPE_EXTERNAL_DIR}/WebRTCServer" CACHE PATH "WEBRTC_ROOT_DIR" FORCE)
	message(STATUS "Search WebRTCServer location ${WEBRTC_ROOT_DIR}/lib/cmake/WebRTCServer")
	find_package(WebRTCServer 
				REQUIRED
				PATHS "${WEBRTC_ROOT_DIR}/lib/cmake"
				NO_DEFAULT_PATH)
				
	set_target_properties(WebRTCServer PROPERTIES
		  MAP_IMPORTED_CONFIG_MINSIZEREL Release
		  MAP_IMPORTED_CONFIG_RELWITHDEBINFO Release)	

	target_link_libraries(filter WebRTCServer)
endif()

# Configure Visual Studio to handle more options.
if(WIN32)
  target_compile_options(filter PRIVATE /bigobj)
endif(WIN32)

target_compile_definitions(filter PRIVATE "-DUSE_BOOST_REGEX" "-DFILTER_BUILD" "-DOPENCV" ${USE_DLIB} 
							${USE_GFLAGS} ${USE_GLOG} ${USE_CUDA} ${USE_CUBLAS} ${USE_LEVELDB} ${USE_LMDB} 
							${USE_HDF5} ${USE_SNAPPY} ${USE_PROTOBUF} ${USE_CAFFE} ${USE_WEBRTC})

# Enable the addition of algorithms without forcing a rerun of CMake
if(WIN32)
  set(script_path "${CMAKE_SOURCE_DIR}/../scripts/headerList.bat")
  set(script_compy "${CMAKE_SOURCE_DIR}/../scripts/compy.bat")
  file(TO_NATIVE_PATH "${script_compy}" os_path)
  set(script_compy ${os_path})
  add_custom_command(
    TARGET filter
    PRE_BUILD
    COMMAND cmd /c echo \#pragma once > "${os_ref_header_path}.cmp"
    COMMAND cmd /c echo ^// Algorithm header to reference  >> \"${os_ref_header_path}.cmp\"
    COMMAND cmd /c "${script_path}" "filter/algos" >> \"${os_ref_header_path}.cmp\"
	COMMAND cmd /c "${script_path}" "filter/datasource" >> \"${os_ref_header_path}.cmp\"
    COMMAND cmd /c "${script_compy}" \"${os_ref_header_path}.cmp\" \"${os_ref_header_path}\"
    COMMENT "Generate reference file"
		WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/header/
  )
endif(WIN32)

if(UNIX)
  set(script_path "${CMAKE_SOURCE_DIR}/../scripts/generate_References_header.sh")
  add_custom_target(
    update_reference
    COMMAND echo "Collect algorithm headers in ${os_ref_header_path}"
    WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}/header/filter"
  )

  add_custom_command(
    TARGET update_reference
    POST_BUILD
    COMMAND bash "${script_path}" "${os_ref_header_path}"
    COMMENT "Generate reference file"
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/header/filter
  )
add_dependencies(filter update_reference)
set(CMAKE_THREAD_PREFER_PTHREAD TRUE)
set(THREADS_PREFER_PTHREAD_FLAG TRUE)
find_package(Threads REQUIRED)
if(CMAKE_USE_PTHREADS_INIT)
  set(CMAKE_C_FLAGS ${CMAKE_C_FLAGS} "-pthread")
endif()
target_link_libraries( filter ${CMAKE_THREAD_LIBS_INIT} )
message(STATUS "LINK TO PTHREAD ${CMAKE_THREAD_LIBS_INIT}")
endif(UNIX)

if(WIN32)
target_compile_options(filter PRIVATE "/MP")
endif()

target_compile_definitions(filter PRIVATE "-DUSE_BOOST_REGEX" "-DFILTER_BUILD")
#target_link_libraries(filter ${yolov2_LIBRARIES} )
if(WIN32) #TODO: Is MSYS true when MSVC is true?
  message(STATUS "Test if it works with windows")
  target_link_libraries(filter ws2_32 wsock32)
endif(WIN32)

display_target_properties(filter)


install (TARGETS filter 
		CONFIGURATIONS Debug
		RUNTIME DESTINATION bin/Debug
		COMPONENT runtime
		LIBRARY DESTINATION lib/Debug
		COMPONENT library
		ARCHIVE DESTINATION lib/Debug
		COMPONENT library)

install (TARGETS filter 
		CONFIGURATIONS Release 
		RUNTIME DESTINATION bin/Release 
		COMPONENT runtime
		LIBRARY DESTINATION lib/Release
		COMPONENT library
		ARCHIVE DESTINATION lib/Release		
		COMPONENT library)
		
install (TARGETS filter 
		CONFIGURATIONS RelWithDebInfo 
		RUNTIME DESTINATION bin/Release 
		COMPONENT runtime
		LIBRARY DESTINATION lib/Release
		COMPONENT library
		ARCHIVE DESTINATION lib/Release		
		COMPONENT library)
		
install_dependencies(filter)

install(CODE "set(PROJECT_SOURCE_DIR \"\${CMAKE_INSTALL_PREFIX}\")" COMPONENT runtime)
install(CODE "set(LICENSE_DIR \"${PROJECT_SOURCE_DIR}\")" COMPONENT runtime)
install(CODE "set(HIPE_INSTALL_DIR \"${CMAKE_INSTALL_PREFIX}\")" COMPONENT runtime)
install (SCRIPT "${CMAKE_SOURCE_DIR}/cmake/postInstall.cmake" COMPONENT runtime)

install(CODE "set(PROJECT_SOURCE_DIR \"\${CMAKE_INSTALL_PREFIX}/include\")" COMPONENT headers)
install(CODE "set(LICENSE_DIR \"${PROJECT_SOURCE_DIR}\")" COMPONENT headers)
install(CODE "set(HIPE_INSTALL_DIR \"${CMAKE_INSTALL_PREFIX}\")" COMPONENT headers)
install (SCRIPT "${CMAKE_SOURCE_DIR}/cmake/postInstall.cmake" COMPONENT headers)
